{"version":3,"file":"static/js/432.d8a30520.chunk.js","mappings":"mPA+EA,UAtEqB,WACnB,IAEA,GAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAmCC,EAAAA,EAAAA,MAAnC,eAAOC,EAAP,KAAsBC,EAAtB,KAcMC,EAASC,EAAAA,KAAaC,MAAM,CAChCX,KAAMU,EAAAA,KAAaE,WACnBV,MAAOQ,EAAAA,KAAaR,QAAQU,WAC5BR,SAAUM,EAAAA,KAAaE,aAGzB,OACE,iCACE,SAAC,IAAD,CACEC,QAAQ,KACRC,UAAU,KACVC,MAAM,UACNC,GAAI,CAAEC,SAAU,GAJlB,SA3BqB,oEAmCrB,UAAC,IAAD,CACEH,UAAU,OACVE,GAAI,CACF,kBAAmB,CAAEE,EAAG,EAAGC,MAAO,SAEpCC,SAAUX,EACVY,SAlCe,SAAAC,GACnBA,EAAMC,iBACNhB,EAAc,CAAEP,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,IACzBI,GACFgB,EAAAA,GAAAA,QAAA,6CAEFvB,EAAQ,IACRE,EAAS,IACTE,EAAY,KAoBV,WAQE,SAAC,IAAD,CACEoB,GAAG,OACHC,MAAM,kBACNb,QAAQ,WACRc,SAAU,SAAAC,GAAC,OAAI3B,EAAQ2B,EAAEC,OAAOC,WAElC,SAAC,IAAD,CACEL,GAAG,QACHC,MAAM,mBACNb,QAAQ,WACRc,SAAU,SAAAC,GAAC,OAAIzB,EAASyB,EAAEC,OAAOC,WAEnC,SAAC,IAAD,CACEL,GAAG,WACHC,MAAM,sBACNb,QAAQ,WACRc,SAAU,SAAAC,GAAC,OAAIvB,EAAYuB,EAAEC,OAAOC,WAEtC,SAAC,IAAD,CAAQjB,QAAQ,YAAYkB,KAAK,SAASC,KAAK,SAA/C","sources":["pages/RegisterPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useAddNewUserMutation } from '../redux/user';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport * as yup from 'yup';\nimport toast from 'react-hot-toast';\n\nconst RegisterPage = () => {\n  const registrationMessage = `Please, fill out the registration form to use the application.`;\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [createNewUser, isSuccess] = useAddNewUserMutation();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    createNewUser({ name, email, password });\n    if (isSuccess) {\n      toast.success(`The registration procedure was successful`);\n    }\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  //Схема валидации\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().required(),\n  });\n\n  return (\n    <>\n      <Typography\n        variant=\"h6\"\n        component=\"h2\"\n        color=\"inherit\"\n        sx={{ flexGrow: 1 }}\n      >\n        {registrationMessage}\n      </Typography>\n      <Box\n        component=\"form\"\n        sx={{\n          '& > :not(style)': { m: 1, width: '25ch' },\n        }}\n        validate={schema}\n        onSubmit={handleSubmit}\n      >\n        <TextField\n          id=\"name\"\n          label=\"Enter your name\"\n          variant=\"standard\"\n          onChange={e => setName(e.target.value)}\n        />\n        <TextField\n          id=\"email\"\n          label=\"Enter your email\"\n          variant=\"standard\"\n          onChange={e => setEmail(e.target.value)}\n        />\n        <TextField\n          id=\"password\"\n          label=\"Enter your password\"\n          variant=\"standard\"\n          onChange={e => setPassword(e.target.value)}\n        />\n        <Button variant=\"contained\" size=\"medium\" type=\"submit\">\n          Submit\n        </Button>\n      </Box>\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["useState","name","setName","email","setEmail","password","setPassword","useAddNewUserMutation","createNewUser","isSuccess","schema","yup","shape","required","variant","component","color","sx","flexGrow","m","width","validate","onSubmit","event","preventDefault","toast","id","label","onChange","e","target","value","size","type"],"sourceRoot":""}